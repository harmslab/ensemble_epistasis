#!/usr/bin/env python3
__description__ = \
"""
extract.py

Extract a huge number of ddG calculations generated by ROSETTA into a single 
csv file.
"""
__author__ = "Michael J. Harms"
__date__ = "2019-11-03"
__usage__ = "extact.py out_csv"

import numpy as np
import os, glob, sys

def read_ddg_file(filename):
    """
    Read the scores out of a ddG file.
    """

    # Get mutations from the filename
    mutation_string = os.path.split(filename)[-1].split(".")[0]
    mutations = mutation_string.split("-")

    wt = []
    mut = []
    ddg = []
    with open(filename) as f:

        # Go through every line.
        for line in f.readlines():
            col = line.split()

            # Some corrupted lines do not have complex --> toss them
            if col[0] != "COMPLEX:":
                continue

            # Grab either WT or mutant ddG value
            if col[2].startswith("WT"):
                wt.append(float(col[3])) 
            else:
                mut.append(float(col[3]))

    # Take the average of the WT scores for the ddG calculation
    if len(wt) > 0:
        ddg = []
        bg_mean = np.mean(wt)
    else:
        bg_mean = np.nan

    # Record ddG
    for m in mut:
        ddg.append(m - bg_mean)
        
    return mutations, wt, mut, ddg


def extract(out_file,base=".",calc_types=("apo","ca","ca-pep")):

    g = open(out_file,'w')
    g.write("state,replicate,file,mut1,mut2,score,ddg\n")

    for c in calc_types:
    
        directory = os.path.join(base,c)
        structures = [os.path.join(directory,s) for s in os.listdir(directory)]

        for s in structures:

            ddg_files = glob.glob(os.path.join(s,"*.ddg"))
            struct = os.path.split(s)[-1]
           
            for d in ddg_files: 
                muts, wt, mut, mut_ddg = read_ddg_file(d)
                if len(muts) == 1:
                    muts.append(None)

                f = os.path.split(d)[-1]
        
                for w in wt:
                    g.write("{},{},{},{},{},{},{}\n".format(c,struct,f,None,None,w,None))

                for i, m in enumerate(mut):
                    g.write("{},{},{},{},{},{},{}\n".format(c,struct,f,muts[0],muts[1],m,mut_ddg[i]))
            g.flush()

    g.close()

def main(argv=None):
    
    if argv is None:
        argv = sys.argv[1:]
    
    try:
        out_file = argv[0]
    except IndexError:
        err = "incorrect arguments. Usage:\n\n{}\n\n".format(__usage__)
        raise ValueError(err)

    extract(out_file)

if __name__ == "__main__":
    main()
